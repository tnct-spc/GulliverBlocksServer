"""empty message

Revision ID: 7f922a2057ea
Revises: 
Create Date: 2019-08-23 13:05:59.909998

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7f922a2057ea'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('map',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('merge',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pattern',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('extend_to_right', sa.Boolean(), nullable=False),
    sa.Column('extend_to_left', sa.Boolean(), nullable=False),
    sa.Column('extend_to_top', sa.Boolean(), nullable=False),
    sa.Column('extend_to_bottom', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('block',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('x', sa.Integer(), nullable=False),
    sa.Column('y', sa.Integer(), nullable=False),
    sa.Column('z', sa.Integer(), nullable=False),
    sa.Column('time', sa.Float(), nullable=False),
    sa.Column('colorID', sa.String(), nullable=False),
    sa.Column('map_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('merge_map',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('map_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('merge_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('x', sa.Integer(), nullable=False),
    sa.Column('y', sa.Integer(), nullable=False),
    sa.Column('rotate', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.ForeignKeyConstraint(['merge_id'], ['merge.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pattern_block',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('x', sa.Integer(), nullable=False),
    sa.Column('y', sa.Integer(), nullable=False),
    sa.Column('z', sa.Integer(), nullable=False),
    sa.Column('colorID', sa.String(), nullable=False),
    sa.Column('pattern_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['pattern_id'], ['pattern.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('real_sense',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('current_map_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['current_map_id'], ['map.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('color_rule',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('map_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('block_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('origin', sa.String(), nullable=True),
    sa.Column('to', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['block_id'], ['block.id'], ),
    sa.ForeignKeyConstraint(['map_id'], ['map.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('color_rule')
    op.drop_table('real_sense')
    op.drop_table('pattern_block')
    op.drop_table('merge_map')
    op.drop_table('block')
    op.drop_table('pattern')
    op.drop_table('merge')
    op.drop_table('map')
    # ### end Alembic commands ###
